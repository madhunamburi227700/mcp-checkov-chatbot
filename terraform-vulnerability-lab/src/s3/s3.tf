resource "aws_s3_bucket" "insecure_bucket" {
  bucket = "my-insecure-bucket"
  acl    = "private"

  versioning {
    enabled = true
  }

  replication_configuration {
    role = "arn:aws:iam::123456789012:role/s3-replication-role"

    rules {
      id     = "replication-rule"
      status = "Enabled"

      destination {
        bucket        = "arn:aws:s3:::destination-bucket"
        storage_class = "STANDARD"
      }
    }
  }

  logging {
    target_bucket = "my-log-bucket"
    target_prefix = "log/"
  }

  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm     = "aws:kms"
        kms_master_key_id = "alias/my-key"
      }
    }
  }

  lifecycle_rule {
    id      = "log"
    enabled = true

    transition {
      days          = 30
      storage_class = "GLACIER"
    }

    expiration {
      days = 365
    }
  }

  tags = {
    Name = "My Test Bucket"
  }
}

resource "aws_s3_bucket_notification" "insecure_bucket_notification" {
  bucket = aws_s3_bucket.insecure_bucket.id

  lambda_function {
    lambda_function_arn = "arn:aws:lambda:us-west-2:123456789012:function:my-function"
    events              = ["s3:ObjectCreated:*"]
  }
}

resource "aws_s3_bucket_policy" "insecure_policy" {
  bucket = aws_s3_bucket.insecure_bucket.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action    = ["s3:GetObject"],
        Effect    = "Allow",
        Resource  = join("", ["arn:aws:s3:::", aws_s3_bucket.insecure_bucket.id, "/*"]),
        Principal = "*",
      },
    ],
  })
}

resource "aws_s3_bucket_public_access_block" "insecure_public_access_block" {
  bucket = aws_s3_bucket.insecure_bucket.id

  block_public_acls       = true
  ignore_public_acls      = true
  block_public_policy     = true
  restrict_public_buckets = true
}

